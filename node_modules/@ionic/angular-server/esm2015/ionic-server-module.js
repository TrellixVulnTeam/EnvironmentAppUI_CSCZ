import { DOCUMENT } from '@angular/common';
import { APP_ID, NgModule } from '@angular/core';
import { BEFORE_APP_SERIALIZED } from '@angular/platform-server';
import { hydrateDocument } from '@ionic/core/hydrate';
import * as i0 from "@angular/core";
// @dynamic
export class IonicServerModule {
}
/** @nocollapse */ IonicServerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: IonicServerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ IonicServerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: IonicServerModule });
/** @nocollapse */ IonicServerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: IonicServerModule, providers: [
        {
            provide: BEFORE_APP_SERIALIZED,
            useFactory: hydrateIonicComponents,
            multi: true,
            deps: [DOCUMENT, APP_ID],
        },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: IonicServerModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        {
                            provide: BEFORE_APP_SERIALIZED,
                            useFactory: hydrateIonicComponents,
                            multi: true,
                            deps: [DOCUMENT, APP_ID],
                        },
                    ],
                }]
        }] });
// @dynamic
export function hydrateIonicComponents(doc, appId) {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    return () => {
        return hydrateDocument(doc, {
            clientHydrateAnnotations: false,
            excludeComponents: [
                // overlays
                'ion-action-sheet',
                'ion-alert',
                'ion-loading',
                'ion-modal',
                'ion-picker',
                'ion-popover',
                'ion-toast',
                'ion-toast',
                // navigation
                'ion-router',
                'ion-route',
                'ion-route-redirect',
                'ion-router-link',
                'ion-router-outlet',
                // tabs
                'ion-tabs',
                'ion-tab',
                // auxiliar
                'ion-picker-column',
                'ion-virtual-scroll',
            ],
        }).then((hydrateResults) => {
            hydrateResults.diagnostics.forEach((d) => {
                if (d.type === 'error') {
                    console.error(d.messageText);
                }
                else if (d.type === 'debug') {
                    console.debug(d.messageText);
                }
                else {
                    console.log(d.messageText);
                }
            });
            if (doc.head != null) {
                const styleElms = doc.head.querySelectorAll('style[data-styles]');
                // eslint-disable-next-line @typescript-eslint/prefer-for-of
                for (let i = 0; i < styleElms.length; i++) {
                    styleElms[i].setAttribute('ng-transition', appId);
                }
            }
            if (doc.body != null) {
                const ionPages = doc.body.querySelectorAll('.ion-page.ion-page-invisible');
                // eslint-disable-next-line @typescript-eslint/prefer-for-of
                for (let i = 0; i < ionPages.length; i++) {
                    ionPages[i].classList.remove('ion-page-invisible');
                }
            }
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtc2VydmVyLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pb25pYy1zZXJ2ZXItbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBRXRELFdBQVc7QUFXWCxNQUFNLE9BQU8saUJBQWlCOztrSUFBakIsaUJBQWlCO21JQUFqQixpQkFBaUI7bUlBQWpCLGlCQUFpQixhQVRqQjtRQUNUO1lBQ0UsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixVQUFVLEVBQUUsc0JBQXNCO1lBQ2xDLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztTQUN6QjtLQUNGOzRGQUVVLGlCQUFpQjtrQkFWN0IsUUFBUTttQkFBQztvQkFDUixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsVUFBVSxFQUFFLHNCQUFzQjs0QkFDbEMsS0FBSyxFQUFFLElBQUk7NEJBQ1gsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQzt5QkFDekI7cUJBQ0Y7aUJBQ0Y7O0FBR0QsV0FBVztBQUNYLE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxHQUFRLEVBQUUsS0FBVTtJQUN6RCw2RUFBNkU7SUFDN0UsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLGVBQWUsQ0FBQyxHQUFHLEVBQUU7WUFDMUIsd0JBQXdCLEVBQUUsS0FBSztZQUMvQixpQkFBaUIsRUFBRTtnQkFDakIsV0FBVztnQkFDWCxrQkFBa0I7Z0JBQ2xCLFdBQVc7Z0JBQ1gsYUFBYTtnQkFDYixXQUFXO2dCQUNYLFlBQVk7Z0JBQ1osYUFBYTtnQkFDYixXQUFXO2dCQUNYLFdBQVc7Z0JBRVgsYUFBYTtnQkFDYixZQUFZO2dCQUNaLFdBQVc7Z0JBQ1gsb0JBQW9CO2dCQUNwQixpQkFBaUI7Z0JBQ2pCLG1CQUFtQjtnQkFFbkIsT0FBTztnQkFDUCxVQUFVO2dCQUNWLFNBQVM7Z0JBRVQsV0FBVztnQkFDWCxtQkFBbUI7Z0JBQ25CLG9CQUFvQjthQUNyQjtTQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtZQUN6QixjQUFjLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO29CQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDOUI7cUJBQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtvQkFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzlCO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUM1QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtnQkFDcEIsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBaUMsQ0FBQztnQkFDbEcsNERBQTREO2dCQUM1RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDekMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ25EO2FBQ0Y7WUFFRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO2dCQUNwQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDhCQUE4QixDQUE0QixDQUFDO2dCQUN0Ryw0REFBNEQ7Z0JBQzVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN4QyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2lCQUNwRDthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQVBQX0lELCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQkVGT1JFX0FQUF9TRVJJQUxJWkVEIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyJztcbmltcG9ydCB7IGh5ZHJhdGVEb2N1bWVudCB9IGZyb20gJ0Bpb25pYy9jb3JlL2h5ZHJhdGUnO1xuXG4vLyBAZHluYW1pY1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogQkVGT1JFX0FQUF9TRVJJQUxJWkVELFxuICAgICAgdXNlRmFjdG9yeTogaHlkcmF0ZUlvbmljQ29tcG9uZW50cyxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW0RPQ1VNRU5ULCBBUFBfSURdLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIElvbmljU2VydmVyTW9kdWxlIHt9XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZUlvbmljQ29tcG9uZW50cyhkb2M6IGFueSwgYXBwSWQ6IGFueSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiBoeWRyYXRlRG9jdW1lbnQoZG9jLCB7XG4gICAgICBjbGllbnRIeWRyYXRlQW5ub3RhdGlvbnM6IGZhbHNlLFxuICAgICAgZXhjbHVkZUNvbXBvbmVudHM6IFtcbiAgICAgICAgLy8gb3ZlcmxheXNcbiAgICAgICAgJ2lvbi1hY3Rpb24tc2hlZXQnLFxuICAgICAgICAnaW9uLWFsZXJ0JyxcbiAgICAgICAgJ2lvbi1sb2FkaW5nJyxcbiAgICAgICAgJ2lvbi1tb2RhbCcsXG4gICAgICAgICdpb24tcGlja2VyJyxcbiAgICAgICAgJ2lvbi1wb3BvdmVyJyxcbiAgICAgICAgJ2lvbi10b2FzdCcsXG4gICAgICAgICdpb24tdG9hc3QnLFxuXG4gICAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgICAgJ2lvbi1yb3V0ZXInLFxuICAgICAgICAnaW9uLXJvdXRlJyxcbiAgICAgICAgJ2lvbi1yb3V0ZS1yZWRpcmVjdCcsXG4gICAgICAgICdpb24tcm91dGVyLWxpbmsnLFxuICAgICAgICAnaW9uLXJvdXRlci1vdXRsZXQnLFxuXG4gICAgICAgIC8vIHRhYnNcbiAgICAgICAgJ2lvbi10YWJzJyxcbiAgICAgICAgJ2lvbi10YWInLFxuXG4gICAgICAgIC8vIGF1eGlsaWFyXG4gICAgICAgICdpb24tcGlja2VyLWNvbHVtbicsXG4gICAgICAgICdpb24tdmlydHVhbC1zY3JvbGwnLFxuICAgICAgXSxcbiAgICB9KS50aGVuKChoeWRyYXRlUmVzdWx0cykgPT4ge1xuICAgICAgaHlkcmF0ZVJlc3VsdHMuZGlhZ25vc3RpY3MuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBpZiAoZC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihkLm1lc3NhZ2VUZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmIChkLnR5cGUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRvYy5oZWFkICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVFbG1zID0gZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZGF0YS1zdHlsZXNdJykgYXMgTm9kZUxpc3RPZjxIVE1MU3R5bGVFbGVtZW50PjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVFbG1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3R5bGVFbG1zW2ldLnNldEF0dHJpYnV0ZSgnbmctdHJhbnNpdGlvbicsIGFwcElkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZG9jLmJvZHkgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBpb25QYWdlcyA9IGRvYy5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pb24tcGFnZS5pb24tcGFnZS1pbnZpc2libGUnKSBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW9uUGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpb25QYWdlc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdpb24tcGFnZS1pbnZpc2libGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuIl19